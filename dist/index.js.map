{"version":3,"file":"index.js","sources":["../src/constant.ts","../src/rollup.utils.ts","../src/moduleprefixtransform.ts","../src/index.ts"],"sourcesContent":["\nconst viteImportAnalysisModulePrefix = '/@id/';\nconst tag = 'external:';\nconst prefix = `${viteImportAnalysisModulePrefix}${tag}`;\n\nexport { viteImportAnalysisModulePrefix, tag, prefix };\n","// https://github.com/rollup/rollup/blob/ef820b637a8d6f8f51955a1d3163de81c7830249/src/utils/options/normalizeInputOptions.ts#L112\n// https://github.com/rollup/rollup/blob/ef820b637a8d6f8f51955a1d3163de81c7830249/src/utils/ensureArray.ts#L1\n\nimport type { ExternalOption } from 'rollup';\n\nfunction ensureArray<T>(items: T[] | T): T[] {\n    if (Array.isArray(items)) return items.filter(Boolean) as T[];\n    if (items) return [items];\n    return [];\n}\n\ninterface External {\n    (source: string, importer: string | undefined, isResolved: boolean): boolean;\n}\n\nfunction getIdMatcher(option?: ExternalOption | boolean): External {\n    if (!option) return () => false;\n    if (option === true) return () => true;\n    if (typeof option === 'function') return function (id) {\n        return !id.startsWith('\\0') && Reflect.apply(option, undefined, arguments);\n    };\n    const ids = new Set<string>();\n    const matchers: RegExp[] = [];\n    for (const value of ensureArray(option)) {\n        if (value instanceof RegExp) matchers.push(value);\n        else ids.add(value);\n    }\n    return (id: string) => ids.has(id) || matchers.some(matcher => matcher.test(id));\n};\n\nexport type { External };\nexport default getIdMatcher;\n","import MagicString from 'magic-string';\nimport { walk } from 'estree-walker';\nimport { prefix } from './constant.js';\nimport type { Node } from 'estree';\nimport type { Plugin } from 'vite';\n\nexport default {\n    name: 'module-prefix-transform',\n    transform(code, id) {\n        if (!code.includes(prefix)) return;\n        const ast = this.parse(code) as Node;\n        let ms: MagicString | undefined;\n        walk(ast, {\n            enter(node) {\n                if (!('source' in node)) return;\n                const { source } = node;\n                if (!source) return;\n                if (source.type !== 'Literal') return;\n                const { value } = source;\n                if (typeof value !== 'string') return;\n                if (!value.startsWith(prefix)) return;\n                // @ts-ignore\n                const start = source.start + 1;\n                ms ??= new MagicString(code);\n                ms.overwrite(start, start + prefix.length, '');\n            },\n        });\n        if (!ms) return;\n        return {\n            code: ms.toString(),\n            map: ms.generateMap({\n                file: id,\n                includeContent: true,\n                hires: true\n            }),\n        };\n    },\n} as Plugin;\n","import { tag } from './constant.js';\nimport getIdMatcher from './rollup.utils.js';\nimport modulePrefixTransform from './moduleprefixtransform.js';\nimport type { ExternalOption } from 'rollup';\nimport type { Plugin } from 'vite';\nimport type { External } from './rollup.utils.js';\n\ninterface PluginOptions {\n    external?: ExternalOption;\n}\n\nfunction externalize(options?: PluginOptions): Plugin {\n    let external: External;\n\n    return {\n        name: 'vite-plugin-externalize',\n        apply: 'serve',\n        configResolved({ plugins, build: { rollupOptions } }) {\n            external = getIdMatcher(options?.external ?? rollupOptions.external);\n            Array.prototype.push.call(plugins, modulePrefixTransform);\n        },\n        resolveId(source, importer) {\n            if (external(source, importer, false))\n                return `${tag}${source}`;\n        },\n        load(id) {\n            if (id.startsWith(tag)) return 'export{}';\n        },\n    };\n}\n\nexport type { PluginOptions };\nexport default externalize;\n"],"names":["viteImportAnalysisModulePrefix","tag","prefix","ensureArray","items","getIdMatcher","option","id","ids","matchers","value","matcher","modulePrefixTransform","code","ast","ms","walk","node","source","start","MagicString","externalize","options","external","plugins","rollupOptions","importer"],"mappings":";;AACA,MAAMA,IAAiC,SACjCC,IAAM,aACNC,IAAS,GAAGF,CAA8B,GAAGC,CAAG;ACEtD,SAASE,EAAeC,GAAqB;AACrC,SAAA,MAAM,QAAQA,CAAK,IAAUA,EAAM,OAAO,OAAO,IACjDA,IAAc,CAACA,CAAK,IACjB;AACX;AAMA,SAASC,EAAaC,GAA6C;AAC/D,MAAI,CAACA;AAAQ,WAAO,MAAM;AAC1B,MAAIA,MAAW;AAAM,WAAO,MAAM;AAClC,MAAI,OAAOA,KAAW;AAAY,WAAO,SAAUC,GAAI;AAC5C,aAAA,CAACA,EAAG,WAAW,IAAI,KAAK,QAAQ,MAAMD,GAAQ,QAAW,SAAS;AAAA,IAAA;AAEvE,QAAAE,wBAAU,OACVC,IAAqB,CAAA;AAChB,aAAAC,KAASP,EAAYG,CAAM;AAClC,IAAII,aAAiB,SAAQD,EAAS,KAAKC,CAAK,IAC3CF,EAAI,IAAIE,CAAK;AAEtB,SAAO,CAACH,MAAeC,EAAI,IAAID,CAAE,KAAKE,EAAS,KAAK,CAAWE,MAAAA,EAAQ,KAAKJ,CAAE,CAAC;AACnF;ACtBA,MAAeK,IAAA;AAAA,EACX,MAAM;AAAA,EACN,UAAUC,GAAMN,GAAI;AACZ,QAAA,CAACM,EAAK,SAASX,CAAM;AAAG;AACtB,UAAAY,IAAM,KAAK,MAAMD,CAAI;AACvB,QAAAE;AAgBJ,QAfAC,EAAKF,GAAK;AAAA,MACN,MAAMG,GAAM;AACR,YAAI,EAAE,YAAYA;AAAO;AACnB,cAAA,EAAE,QAAAC,EAAW,IAAAD;AAEnB,YADI,CAACC,KACDA,EAAO,SAAS;AAAW;AACzB,cAAA,EAAE,OAAAR,EAAU,IAAAQ;AAEd,YADA,OAAOR,KAAU,YACjB,CAACA,EAAM,WAAWR,CAAM;AAAG;AAEzB,cAAAiB,IAAQD,EAAO,QAAQ;AACtB,QAAAH,UAAA,IAAIK,EAAYP,CAAI,IAC3BE,EAAG,UAAUI,GAAOA,IAAQjB,EAAO,QAAQ,EAAE;AAAA,MACjD;AAAA,IAAA,CACH,GACG,EAACa;AACE,aAAA;AAAA,QACH,MAAMA,EAAG,SAAS;AAAA,QAClB,KAAKA,EAAG,YAAY;AAAA,UAChB,MAAMR;AAAA,UACN,gBAAgB;AAAA,UAChB,OAAO;AAAA,QAAA,CACV;AAAA,MAAA;AAAA,EAET;AACJ;AC1BA,SAASc,EAAYC,GAAiC;AAC9C,MAAAC;AAEG,SAAA;AAAA,IACH,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe,EAAE,SAAAC,GAAS,OAAO,EAAE,eAAAC,OAAmB;AAClD,MAAAF,IAAWlB,GAAaiB,KAAA,gBAAAA,EAAS,aAAYG,EAAc,QAAQ,GACnE,MAAM,UAAU,KAAK,KAAKD,GAASZ,CAAqB;AAAA,IAC5D;AAAA,IACA,UAAUM,GAAQQ,GAAU;AACpB,UAAAH,EAASL,GAAQQ,GAAU,EAAK;AACzB,eAAA,GAAGzB,CAAG,GAAGiB,CAAM;AAAA,IAC9B;AAAA,IACA,KAAKX,GAAI;AACD,UAAAA,EAAG,WAAWN,CAAG;AAAU,eAAA;AAAA,IACnC;AAAA,EAAA;AAER;"}